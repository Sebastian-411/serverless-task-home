// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  phoneNumber String   @db.VarChar(20)
  addressId   String?  @unique
  role        UserRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  address Address? @relation(fields: [addressId], references: [id], onDelete: SetNull)
  assignedTasks Task[] @relation("AssignedTasks")
  createdTasks  Task[] @relation("CreatedTasks")

  // Optimized indexes for ALL possible queries
  @@index([email]) // Login lookups
  @@index([role]) // Authorization checks
  @@index([createdAt]) // Temporal ordering
  @@index([updatedAt]) // Recent changes tracking
  @@index([name]) // Name-based searches
  @@index([phoneNumber]) // Contact lookups
  
  // Composite indexes for complex queries
  @@index([role, createdAt]) // Admin queries with sorting
  @@index([role, updatedAt]) // Recently modified users by role
  @@index([email, role]) // Fast auth + role lookup
  @@index([createdAt, role]) // Alternative temporal + role queries
  @@index([role, name]) // Role-based name searches
  @@index([addressId, role]) // Geographic + role queries
  
  // Performance indexes for analytics
  @@index([createdAt, updatedAt]) // User activity tracking
  @@index([role, createdAt, updatedAt]) // Comprehensive role analytics
  @@map("users")
}

model Address {
  id              String   @id @default(uuid())
  addressLine1    String   @db.VarChar(500)
  addressLine2    String?  @db.VarChar(500)
  city            String   @db.VarChar(100)
  stateOrProvince String   @db.VarChar(100)
  postalCode      String   @db.VarChar(20)
  country         String   @db.VarChar(100)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User?

  // Geographic search indexes (all combinations)
  @@index([country]) // Country-level queries
  @@index([postalCode]) // Postal code lookups
  @@index([city]) // City searches
  @@index([stateOrProvince]) // State/province queries
  @@index([addressLine1]) // Street address searches
  
  // Hierarchical geographic indexes
  @@index([country, stateOrProvince]) // Country + state queries
  @@index([country, city]) // Country + city queries
  @@index([city, stateOrProvince]) // City + state queries
  @@index([country, stateOrProvince, city]) // Full geographic hierarchy
  @@index([stateOrProvince, city, postalCode]) // Regional precision queries
  
  // Temporal indexes for address changes
  @@index([createdAt]) // Address creation tracking
  @@index([updatedAt]) // Address modification tracking
  @@index([country, createdAt]) // Geographic + temporal analytics
  
  // Combined geographic and temporal
  @@index([country, stateOrProvince, createdAt]) // Regional growth analysis
  @@map("addresses")
}

enum UserRole {
  ADMIN
  USER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id          String      @id @default(uuid())
  title       String      @db.VarChar(255)
  description String      @db.Text
  status      TaskStatus  @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  assignedTo  String?     // User ID (nullable)
  createdBy   String      // User ID
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  assignedUser User? @relation("AssignedTasks", fields: [assignedTo], references: [id], onDelete: SetNull)
  creator      User  @relation("CreatedTasks", fields: [createdBy], references: [id], onDelete: Cascade)

  // Optimized indexes for ALL possible queries
  @@index([status]) // Status-based filtering
  @@index([priority]) // Priority-based filtering
  @@index([assignedTo]) // Assigned user lookups
  @@index([createdBy]) // Creator lookups
  @@index([dueDate]) // Due date filtering
  @@index([createdAt]) // Temporal ordering
  @@index([updatedAt]) // Recent changes tracking
  
  // Composite indexes for complex queries
  @@index([status, priority]) // Status + priority filtering
  @@index([assignedTo, status]) // User's tasks by status
  @@index([createdBy, status]) // Creator's tasks by status
  @@index([dueDate, status]) // Due date + status filtering
  @@index([assignedTo, priority]) // User's tasks by priority
  @@index([createdBy, priority]) // Creator's tasks by priority
  @@index([status, createdAt]) // Status + temporal ordering
  @@index([priority, createdAt]) // Priority + temporal ordering
  
  // Performance indexes for analytics
  @@index([createdAt, status]) // Task creation analytics
  @@index([updatedAt, status]) // Task update analytics
  @@index([dueDate, priority]) // Due date + priority analytics
  @@index([assignedTo, createdBy]) // Assignment analytics
  @@index([status, priority, dueDate]) // Comprehensive task filtering
  @@map("tasks")
}
