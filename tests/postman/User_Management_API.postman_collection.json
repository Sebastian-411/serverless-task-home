{
	"info": {
		"_postman_id": "c78e6789-6b8f-47b7-b0f3-1ad522cb174c",
		"name": "User Management API - Hexagonal Architecture",
		"description": "API collection for user management with authentication and authorization using hexagonal architecture. Includes comprehensive test scenarios with proper validation and environment variable management.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28076391"
	},
	"item": [
		{
			"name": "üîê Authentication Flow",
			"item": [
				{
					"name": "1. Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Response has required fields\", function () {",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('user');",
									"        pm.expect(response).to.have.property('token');",
									"    });",
									"    ",
									"    pm.test(\"User object has required fields\", function () {",
									"        pm.expect(response.user).to.have.property('id');",
									"        pm.expect(response.user).to.have.property('email');",
									"        pm.expect(response.user).to.have.property('name');",
									"        pm.expect(response.user).to.have.property('role');",
									"    });",
									"    ",
									"    pm.test(\"Token is not empty\", function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"    });",
									"    ",
									"    // Save variables for subsequent requests",
									"    pm.environment.set('admin_token', response.token);",
									"    pm.environment.set('admin_user_id', response.user.id);",
									"    pm.environment.set('admin_user_email', response.user.email);",
									"    pm.environment.set('admin_user_name', response.user.name);",
									"    pm.environment.set('admin_user_role', response.user.role);",
									"    ",
									"    console.log('‚úÖ Admin login successful - Token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticate admin user and save token for subsequent requests"
					},
					"response": []
				},
				{
					"name": "2. Login Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 401) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Error response has correct structure\", function () {",
									"        pm.expect(response).to.have.property('error');",
									"        pm.expect(response.error).to.have.property('code');",
									"        pm.expect(response.error).to.have.property('message');",
									"        pm.expect(response.error).to.have.property('statusCode');",
									"    });",
									"    ",
									"    pm.test(\"Error code is INVALID_CREDENTIALS\", function () {",
									"        pm.expect(response.error.code).to.equal('INVALID_CREDENTIALS');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"ValidPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Test invalid login credentials with valid format but non-existent user"
					},
					"response": []
				},
				{
					"name": "3. Login Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 400) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Error response indicates validation error\", function () {",
									"        pm.expect(response).to.have.property('error');",
									"        pm.expect(response).to.have.property('message');",
									"    });",
									"    ",
									"    pm.test(\"Error message mentions email validation\", function () {",
									"        pm.expect(response.message).to.include('email');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"ValidPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Test invalid email format validation"
					},
					"response": []
				},
				{
					"name": "4. Login Invalid Password Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 400) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Error response indicates validation error\", function () {",
									"        pm.expect(response).to.have.property('error');",
									"        pm.expect(response).to.have.property('message');",
									"    });",
									"    ",
									"    pm.test(\"Error message mentions password validation\", function () {",
									"        pm.expect(response.message).to.include('Password');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"valid@example.com\",\n  \"password\": \"weak\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Test invalid password format validation"
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• User Management - Admin Operations",
			"item": [
				{
					"name": "5. Get Users List (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Response has required fields\", function () {",
									"        pm.expect(response).to.have.property('data');",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response).to.have.property('meta');",
									"    });",
									"    ",
									"    pm.test(\"Data is an array\", function () {",
									"        pm.expect(response.data).to.be.an('array');",
									"    });",
									"    ",
									"    pm.test(\"Meta has pagination info\", function () {",
									"        pm.expect(response.meta).to.have.property('count');",
									"        pm.expect(response.meta).to.have.property('total');",
									"        pm.expect(response.meta).to.have.property('page');",
									"        pm.expect(response.meta).to.have.property('limit');",
									"        pm.expect(response.meta).to.have.property('totalPages');",
									"    });",
									"    ",
									"    // Save first user ID if available for testing",
									"    if (response.data && response.data.length > 0) {",
									"        pm.environment.set('first_user_id', response.data[0].id);",
									"        pm.environment.set('first_user_email', response.data[0].email);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get paginated list of users (Admin only)"
					},
					"response": []
				},
				{
					"name": "6. Create Regular User (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique variables for testing",
									"const timestamp = Date.now();",
									"const uniqueEmail = `test.user.${timestamp}@example.com`;",
									"const uniqueName = `Test User ${timestamp}`;",
									"const uniquePhone = `310${timestamp.toString().slice(-8)}`;",
									"",
									"// Set unique variables",
									"pm.environment.set('test_user_email', uniqueEmail);",
									"pm.environment.set('test_user_name', uniqueName);",
									"pm.environment.set('test_user_phone', uniquePhone);",
									"",
									"// Update request body with unique values",
									"const requestBody = pm.request.body.raw;",
									"let updatedBody = requestBody.replace('{{test_user_email}}', uniqueEmail);",
									"updatedBody = updatedBody.replace('{{test_user_name}}', uniqueName);",
									"updatedBody = updatedBody.replace('{{test_phone}}', uniquePhone);",
									"pm.request.body.raw = updatedBody;",
									"",
									"console.log('Generated unique test data:');",
									"console.log('Email:', uniqueEmail);",
									"console.log('Name:', uniqueName);",
									"console.log('Phone:', uniquePhone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Response has required fields\", function () {",
									"        pm.expect(response).to.have.property('success');",
									"        pm.expect(response).to.have.property('data');",
									"        pm.expect(response).to.have.property('message');",
									"    });",
									"    ",
									"    pm.test(\"Success is true\", function () {",
									"        pm.expect(response.success).to.be.true;",
									"    });",
									"    ",
									"    pm.test(\"User data has required fields\", function () {",
									"        pm.expect(response.data).to.have.property('id');",
									"        pm.expect(response.data).to.have.property('name');",
									"        pm.expect(response.data).to.have.property('email');",
									"        pm.expect(response.data).to.have.property('phoneNumber');",
									"        pm.expect(response.data).to.have.property('role');",
									"        pm.expect(response.data).to.have.property('createdAt');",
									"        pm.expect(response.data).to.have.property('updatedAt');",
									"    });",
									"    ",
									"    pm.test(\"User has address data\", function () {",
									"        pm.expect(response.data).to.have.property('address');",
									"        pm.expect(response.data.address).to.have.property('addressLine1');",
									"        pm.expect(response.data.address).to.have.property('city');",
									"        pm.expect(response.data.address).to.have.property('stateOrProvince');",
									"        pm.expect(response.data.address).to.have.property('postalCode');",
									"        pm.expect(response.data.address).to.have.property('country');",
									"    });",
									"    ",
									"    // Save user data for subsequent requests",
									"    pm.environment.set('test_user_id', response.data.id);",
									"    pm.environment.set('test_user_email', response.data.email);",
									"    pm.environment.set('test_user_phone', response.data.phoneNumber);",
									"    pm.environment.set('test_user_role', response.data.role);",
									"    ",
									"    console.log('‚úÖ Test user created successfully - ID: ' + response.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{test_user_name}}\",\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"phoneNumber\": \"{{test_phone}}\",\n  \"role\": \"user\",\n  \"address\": {\n    \"addressLine1\": \"{{test_address_line1}}\",\n    \"addressLine2\": \"{{test_address_line2}}\",\n    \"city\": \"{{test_city}}\",\n    \"stateOrProvince\": \"{{test_state}}\",\n    \"postalCode\": \"{{test_postal_code}}\",\n    \"country\": \"{{test_country}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Admin creates a regular user for testing"
					},
					"response": []
				},
				{
					"name": "7. Get User by ID (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verify that required variables are available",
									"const testUserId = pm.environment.get('test_user_id');",
									"const testUserEmail = pm.environment.get('test_user_email');",
									"const testUserName = pm.environment.get('test_user_name');",
									"",
									"if (!testUserId) {",
									"    console.error('‚ùå test_user_id not found in environment');",
									"    throw new Error('test_user_id is required for this test');",
									"}",
									"",
									"if (!testUserEmail) {",
									"    console.error('‚ùå test_user_email not found in environment');",
									"    throw new Error('test_user_email is required for this test');",
									"}",
									"",
									"if (!testUserName) {",
									"    console.error('‚ùå test_user_name not found in environment');",
									"    throw new Error('test_user_name is required for this test');",
									"}",
									"",
									"console.log('‚úÖ All required variables available:');",
									"console.log('User ID:', testUserId);",
									"console.log('User Email:', testUserEmail);",
									"console.log('User Name:', testUserName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Response has required fields\", function () {",
									"        pm.expect(response).to.have.property('data');",
									"        pm.expect(response).to.have.property('message');",
									"    });",
									"    ",
									"    // Get expected values from environment",
									"    const expectedId = pm.environment.get('test_user_id');",
									"    const expectedEmail = pm.environment.get('test_user_email');",
									"    const expectedName = pm.environment.get('test_user_name');",
									"    ",
									"    console.log('Expected ID:', expectedId);",
									"    console.log('Expected Email:', expectedEmail);",
									"    console.log('Expected Name:', expectedName);",
									"    console.log('Actual ID:', response.data.id);",
									"    console.log('Actual Email:', response.data.email);",
									"    console.log('Actual Name:', response.data.name);",
									"    ",
									"    pm.test(\"User data matches created user\", function () {",
									"        pm.expect(response.data.id).to.equal(expectedId);",
									"        pm.expect(response.data.email).to.equal(expectedEmail);",
									"        pm.expect(response.data.name).to.equal(expectedName);",
									"    });",
									"    ",
									"    pm.test(\"User has complete data\", function () {",
									"        pm.expect(response.data).to.have.property('phoneNumber');",
									"        pm.expect(response.data).to.have.property('role');",
									"        pm.expect(response.data).to.have.property('address');",
									"        pm.expect(response.data).to.have.property('createdAt');",
									"        pm.expect(response.data).to.have.property('updatedAt');",
									"    });",
									"    ",
									"    console.log('‚úÖ Get User by ID successful');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{test_user_id}}"
							]
						},
						"description": "Get specific user by ID (Admin)"
					},
					"response": []
				},
				{
					"name": "8. Update User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Response has required fields\", function () {",
									"        pm.expect(response).to.have.property('data');",
									"        pm.expect(response).to.have.property('message');",
									"    });",
									"    ",
									"    pm.test(\"User data was updated correctly\", function () {",
									"        pm.expect(response.data.id).to.equal(pm.environment.get('test_user_id'));",
									"        pm.expect(response.data.name).to.equal('Updated Test User');",
									"        pm.expect(response.data.phoneNumber).to.equal('3109876543');",
									"    });",
									"    ",
									"    // Update environment variables with new data",
									"    pm.environment.set('test_user_name', response.data.name);",
									"    pm.environment.set('test_user_phone', response.data.phoneNumber);",
									"    ",
									"    console.log('‚úÖ User updated successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test User\",\n  \"phoneNumber\": \"3109876543\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{test_user_id}}"
							]
						},
						"description": "Update user information (Admin)"
					},
					"response": []
				},
				{
					"name": "9. Change User Role (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Response has required fields\", function () {",
									"        pm.expect(response).to.have.property('data');",
									"        pm.expect(response).to.have.property('message');",
									"    });",
									"    ",
									"    pm.test(\"User role was changed to admin\", function () {",
									"        pm.expect(response.data.id).to.equal(pm.environment.get('test_user_id'));",
									"        pm.expect(response.data.role).to.equal('admin');",
									"    });",
									"    ",
									"    // Update environment variable",
									"    pm.environment.set('test_user_role', response.data.role);",
									"    ",
									"    console.log('‚úÖ User role changed to admin');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{test_user_id}}/role",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{test_user_id}}",
								"role"
							]
						},
						"description": "Change user role to admin (Admin only)"
					},
					"response": []
				}
			]
		},
		{
			"name": "üö´ Error Scenarios & Validation",
			"item": [
				{
					"name": "10. Unauthorized Access - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 401) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Error response has correct structure\", function () {",
									"        pm.expect(response).to.have.property('error');",
									"        pm.expect(response.error).to.have.property('code');",
									"        pm.expect(response.error).to.have.property('message');",
									"        pm.expect(response.error).to.have.property('statusCode');",
									"    });",
									"    ",
									"    pm.test(\"Error code is UNAUTHORIZED\", function () {",
									"        pm.expect(response.error.code).to.equal('UNAUTHORIZED');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Test unauthorized access without token"
					},
					"response": []
				},
				{
					"name": "11. Invalid User Creation Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 400) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Error response has validation details\", function () {",
									"        pm.expect(response).to.have.property('error');",
									"        pm.expect(response).to.have.property('message');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\",\n  \"phoneNumber\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Test validation errors for user creation"
					},
					"response": []
				},
				{
					"name": "12. Duplicate Email Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code >= 400) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Error response indicates duplicate email\", function () {",
									"        pm.expect(response).to.have.property('error');",
									"        pm.expect(response.error).to.have.property('message');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Duplicate User\",\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"phoneNumber\": \"{{test_phone}}\",\n  \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Test creating user with duplicate email"
					},
					"response": []
				},
				{
					"name": "13. Get Non-existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 404) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Error response indicates user not found\", function () {",
									"        pm.expect(response).to.have.property('error');",
									"        pm.expect(response.error).to.have.property('message');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/non-existent-user-id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"non-existent-user-id"
							]
						},
						"description": "Test getting non-existent user"
					},
					"response": []
				}
			]
		},
		{
			"name": "üßπ Cleanup Operations",
			"item": [
				{
					"name": "14. Delete Test User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Response has success message\", function () {",
									"        pm.expect(response).to.have.property('message');",
									"    });",
									"    ",
									"    console.log('‚úÖ Test user deleted successfully');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{test_user_id}}"
							]
						},
						"description": "Delete test user (Admin only) - Cleanup"
					},
					"response": []
				},
				{
					"name": "15. Verify User Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Response has JSON content-type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.code === 404) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test(\"Error response indicates user not found\", function () {",
									"        pm.expect(response).to.have.property('error');",
									"        pm.expect(response.error).to.have.property('message');",
									"    });",
									"    ",
									"    console.log('‚úÖ User deletion verified - User not found');",
									"    ",
									"    // Clean up test variables",
									"    pm.environment.unset('test_user_id');",
									"    pm.environment.unset('test_user_email');",
									"    pm.environment.unset('test_user_name');",
									"    pm.environment.unset('test_user_phone');",
									"    pm.environment.unset('test_user_role');",
									"    ",
									"    console.log('üßπ Test variables cleaned up');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{test_user_id}}"
							]
						},
						"description": "Verify that the test user was actually deleted"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ Starting request:', pm.request.name);",
					"",
					"// Auto-set Authorization header for requests that need it",
					"if (pm.request.headers.has('Authorization') && pm.environment.get('admin_token')) {",
					"    pm.request.headers.get('Authorization').value = 'Bearer ' + pm.environment.get('admin_token');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log('‚úÖ Request completed:', pm.request.name);",
					"",
					"// Global response time check",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global content-type check",
					"pm.test(\"Response has correct content-type\", function () {",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"});",
					"",
					"// Global error handling",
					"if (pm.response.code >= 400) {",
					"    pm.test(\"Error response has proper structure\", function () {",
					"        const response = pm.response.json();",
					"        pm.expect(response).to.have.property('error');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api",
			"type": "string"
		}
	]
}