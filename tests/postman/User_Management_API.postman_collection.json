{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "User Management API",
		"description": "Collection for testing User Management endpoints with Hexagonal Architecture",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Login successful\");",
									"});",
									"",
									"pm.test(\"Response contains accessToken\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.exist;",
									"    // Save token for other requests",
									"    pm.environment.set(\"admin_token\", jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"User role is admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.role).to.eql(\"admin\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Dedicated Regular User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique email for dedicated regular user",
									"const timestamp = Date.now();",
									"const randomId = Math.floor(Math.random() * 1000);",
									"const testRegularEmail = `regular${timestamp}${randomId}@test.com`;",
									"pm.environment.set(\"test_regular_email\", testRegularEmail);",
									"",
									"console.log(\"Generated test regular email:\", testRegularEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"User is created with role user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.eql(\"user\");",
									"    // Save regular user ID for tests",
									"    pm.environment.set(\"test_regular_user_id\", jsonData.data.id);",
									"});",
									"",
									"console.log(\"âœ… Dedicated regular user created successfully\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Regular Test User\",\n  \"email\": \"{{test_regular_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"phoneNumber\": \"{{test_phone}}\",\n  \"address\": {\n    \"addressLine1\": \"{{test_address_line1}}\",\n    \"city\": \"{{test_city}}\",\n    \"stateOrProvince\": \"{{test_state}}\",\n    \"postalCode\": \"{{test_postal_code}}\",\n    \"country\": \"{{test_country}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Regular User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Login successful\");",
									"});",
									"",
									"pm.test(\"Response contains accessToken\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.exist;",
									"    // Save token for regular user requests",
									"    pm.environment.set(\"regular_user_token\", jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"User role is user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.role).to.eql(\"user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_regular_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Create User - Self Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique email using timestamp",
									"const timestamp = Date.now();",
									"const randomId = Math.floor(Math.random() * 1000);",
									"const uniqueEmail = `user${timestamp}${randomId}@test.com`;",
									"pm.environment.set(\"unique_email\", uniqueEmail);",
									"",
									"console.log(\"Generated unique email:\", uniqueEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"User is created with role user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.eql(\"user\");",
									"});",
									"",
									"pm.test(\"User has correct email\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedEmail = pm.environment.get(\"unique_email\");",
									"    pm.expect(jsonData.data.email).to.eql(expectedEmail);",
									"});",
									"",
									"pm.test(\"Response contains required user fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('phoneNumber');",
									"    pm.expect(jsonData.data).to.have.property('address');",
									"    pm.expect(jsonData.data).to.have.property('createdAt');",
									"    // Save user ID for role change tests",
									"    pm.environment.set(\"test_user_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{test_user_name}}\",\n  \"email\": \"{{unique_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"phoneNumber\": \"{{test_phone}}\",\n  \"address\": {\n    \"addressLine1\": \"{{test_address_line1}}\",\n    \"addressLine2\": \"{{test_address_line2}}\",\n    \"city\": \"{{test_city}}\",\n    \"stateOrProvince\": \"{{test_state}}\",\n    \"postalCode\": \"{{test_postal_code}}\",\n    \"country\": \"{{test_country}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Admin User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique email for admin",
									"const timestamp = Date.now();",
									"const randomId = Math.floor(Math.random() * 1000);",
									"const uniqueAdminEmail = `admin${timestamp}${randomId}@test.com`;",
									"pm.environment.set(\"unique_admin_email\", uniqueAdminEmail);",
									"",
									"console.log(\"Generated unique admin email:\", uniqueAdminEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"User is created with role admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.eql(\"admin\");",
									"});",
									"",
									"pm.test(\"Admin has correct email\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedEmail = pm.environment.get(\"unique_admin_email\");",
									"    pm.expect(jsonData.data.email).to.eql(expectedEmail);",
									"});",
									"",
									"pm.test(\"Response contains required admin fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('phoneNumber');",
									"    pm.expect(jsonData.data).to.have.property('address');",
									"    pm.expect(jsonData.data).to.have.property('createdAt');",
									"    // Save admin ID for role change tests",
									"    pm.environment.set(\"created_admin_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{admin_user_name}}\",\n  \"email\": \"{{unique_admin_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"phoneNumber\": \"{{admin_phone}}\",\n  \"role\": \"admin\",\n  \"address\": {\n    \"addressLine1\": \"{{admin_address_line1}}\",\n    \"city\": \"{{admin_city}}\",\n    \"stateOrProvince\": \"{{admin_state}}\",\n    \"postalCode\": \"{{admin_postal_code}}\",\n    \"country\": \"{{admin_country}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Duplicate Email (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response has correct error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Conflict error\");",
									"    pm.expect(jsonData.message).to.include(\"already exists\");",
									"});",
									"",
									"console.log(\"âœ… Duplicate email validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Duplicate User\",\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"phoneNumber\": \"3101234567\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Invalid Data (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Validation error\");",
									"});",
									"",
									"console.log(\"âœ… Validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Retrieval",
			"item": [
				{
					"name": "Get All Users (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains users array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.meta.count).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Users have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        var firstUser = jsonData.data[0];",
									"        pm.expect(firstUser).to.have.property('id');",
									"        pm.expect(firstUser).to.have.property('email');",
									"        pm.expect(firstUser).to.have.property('name');",
									"        pm.expect(firstUser).to.have.property('role');",
									"        pm.expect(firstUser).to.have.property('createdAt');",
									"    }",
									"});",
									"",
									"console.log(\"âœ… Users list retrieved successfully\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users - No Auth (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has authorization error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Authorization error\");",
									"});",
									"",
									"console.log(\"âœ… Authorization validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID (Admin viewing any user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"});",
									"",
									"pm.test(\"User ID matches requested ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    var requestedId = pm.environment.get(\"test_user_id\");",
									"    pm.expect(jsonData.data.id).to.eql(requestedId);",
									"});",
									"",
									"console.log(\"âœ… User details retrieved successfully by admin\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID - Non-existent User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has not found error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Not found\");",
									"    pm.expect(jsonData.message).to.include(\"User not found\");",
									"});",
									"",
									"console.log(\"âœ… Non-existent user validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID - No Authorization (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has authorization error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Authorization error\");",
									"});",
									"",
									"console.log(\"âœ… Authorization validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has authorization error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Authorization error\");",
									"    pm.expect(jsonData.message).to.include(\"Only administrators can access\");",
									"});",
									"",
									"console.log(\"âœ… Regular user authorization validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Own Profile (Regular User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"});",
									"",
									"pm.test(\"User role is user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.eql(\"user\");",
									"});",
									"",
									"pm.test(\"User ID matches own ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedId = pm.environment.get(\"test_regular_user_id\");",
									"    pm.expect(jsonData.data.id).to.eql(expectedId);",
									"});",
									"",
									"console.log(\"âœ… Regular user can access own profile successfully\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{test_regular_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_regular_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Other User Profile - Regular User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has authorization error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Authorization error\");",
									"    pm.expect(jsonData.message).to.include(\"Users can only access their own profile\");",
									"});",
									"",
									"console.log(\"âœ… Regular user cannot access other user profiles - validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{created_admin_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{created_admin_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Role Management",
			"item": [
				{
					"name": "Change User Role to Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"User role was changed to admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.eql(\"admin\");",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"});",
									"",
									"console.log(\"âœ… User role changed to admin successfully\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/role",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Admin Role to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"User role was changed to user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.eql(\"user\");",
									"});",
									"",
									"console.log(\"âœ… Admin role changed to user successfully\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{created_admin_id}}/role",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{created_admin_id}}",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Role - Invalid Role (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Validation error\");",
									"    pm.expect(jsonData.message).to.include(\"Invalid role\");",
									"});",
									"",
									"console.log(\"âœ… Invalid role validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"superuser\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/role",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Role - Non-existent User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has not found error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Not found\");",
									"    pm.expect(jsonData.message).to.include(\"User not found\");",
									"});",
									"",
									"console.log(\"âœ… Non-existent user validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/00000000-0000-0000-0000-000000000000/role",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"00000000-0000-0000-0000-000000000000",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Role - No Authorization (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has authorization error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Authorization error\");",
									"});",
									"",
									"console.log(\"âœ… Authorization validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{test_user_id}}/role",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{test_user_id}}",
								"role"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task Management",
			"item": [
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Task is created with correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.title).to.eql(\"Test Task\");",
									"    pm.expect(jsonData.data.priority).to.eql(\"high\");",
									"    pm.expect(jsonData.data.userId).to.exist;",
									"    // Save task ID for other tests",
									"    pm.environment.set(\"test_task_id\", jsonData.data.id);",
									"});",
									"",
									"pm.test(\"Response contains required task fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('priority');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('createdAt');",
									"});",
									"",
									"console.log(\"âœ… Task created successfully\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Task\",\n  \"description\": \"This is a test task for Postman testing\",\n  \"priority\": \"high\",\n  \"dueDate\": \"2024-12-31T23:59:59.000Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task - Case Insensitive Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Priority is normalized to lowercase\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.priority).to.eql('urgent');",
									"});",
									"",
									"pm.test(\"Task created with uppercase priority\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data.title).to.eql('UPPERCASE Priority Test');",
									"});",
									"",
									"console.log(\"âœ… Case-insensitive priority working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"UPPERCASE Priority Test\",\n  \"description\": \"Testing case-insensitive priority validation\",\n  \"priority\": \"URGENT\",\n  \"dueDate\": \"2024-12-31T23:59:59.000Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task - Mixed Case Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Priority is normalized to lowercase\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.priority).to.eql('high');",
									"});",
									"",
									"pm.test(\"Task created with mixed case priority\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data.title).to.eql('MixedCase Priority Test');",
									"});",
									"",
									"console.log(\"âœ… Mixed case priority working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"MixedCase Priority Test\",\n  \"description\": \"Testing case-insensitive priority validation with mixed case\",\n  \"priority\": \"High\",\n  \"dueDate\": \"2024-12-31T23:59:59.000Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task - Invalid Data (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Validation error\");",
									"    pm.expect(jsonData.message).to.include(\"Title is required\");",
									"});",
									"",
									"console.log(\"âœ… Task validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Task without title\",\n  \"priority\": \"invalid_priority\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains tasks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.meta.count).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response contains pagination metadata\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta).to.have.property('total');",
									"    pm.expect(jsonData.meta).to.have.property('page');",
									"    pm.expect(jsonData.meta).to.have.property('limit');",
									"    pm.expect(jsonData.meta).to.have.property('totalPages');",
									"    pm.expect(jsonData.meta).to.have.property('hasNext');",
									"    pm.expect(jsonData.meta).to.have.property('hasPrev');",
									"});",
									"",
									"pm.test(\"Tasks have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        var task = jsonData.data[0];",
									"        pm.expect(task).to.have.property('id');",
									"        pm.expect(task).to.have.property('title');",
									"        pm.expect(task).to.have.property('status');",
									"        pm.expect(task).to.have.property('priority');",
									"    }",
									"});",
									"",
									"console.log(\"âœ… Tasks retrieved successfully with pagination\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks with Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Pagination parameters are correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.page).to.eql(1);",
									"    pm.expect(jsonData.meta.limit).to.eql(5);",
									"});",
									"",
									"pm.test(\"Pagination metadata is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.total).to.be.a('number');",
									"    pm.expect(jsonData.meta.totalPages).to.be.a('number');",
									"    pm.expect(jsonData.meta.hasNext).to.be.a('boolean');",
									"    pm.expect(jsonData.meta.hasPrev).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Tasks count matches limit\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.at.most(5);",
									"});",
									"",
									"console.log(\"âœ… Tasks pagination working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tasks?page=1&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks - Invalid Pagination (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Validation error\");",
									"});",
									"",
									"console.log(\"âœ… Pagination validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tasks?page=0&limit=200",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Task is assigned correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.assignment.assignedTo).to.exist;",
									"    pm.expect(jsonData.message).to.include(\"assigned\");",
									"});",
									"",
									"console.log(\"âœ… Task assigned successfully\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"assignedTo\": \"{{test_regular_user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_task_id}}/assign",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{test_task_id}}",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Task - Unauthorized (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 or 403\", function () {",
									"    pm.expect([401, 403]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test(\"Response has authorization error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.be.oneOf([\"Authorization error\", \"Forbidden\"]);",
									"});",
									"",
									"console.log(\"âœ… Authorization validation working correctly\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"assignedTo\": \"{{test_regular_user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_task_id}}/assign",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{test_task_id}}",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Task has correct structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('priority');",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get('test_task_id'));",
									"});",
									"",
									"console.log(\"âœ… Task retrieved by ID successfully\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{test_task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks with Status Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response).to.have.property('meta');",
									"    pm.expect(response).to.have.property('traceId');",
									"});",
									"",
									"pm.test(\"All tasks have pending status\", function () {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.length > 0) {",
									"        response.data.forEach(task => {",
									"            pm.expect(task.status).to.eql('pending');",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Meta contains pagination info\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.meta).to.have.property('page');",
									"    pm.expect(response.meta).to.have.property('limit');",
									"    pm.expect(response.meta).to.have.property('total');",
									"    pm.expect(response.meta).to.have.property('totalPages');",
									"    pm.expect(response.meta).to.have.property('hasNext');",
									"    pm.expect(response.meta).to.have.property('hasPrev');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks?status=pending&page=1&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks with Priority Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response).to.have.property('meta');",
									"    pm.expect(response).to.have.property('traceId');",
									"});",
									"",
									"pm.test(\"All tasks have high priority\", function () {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.length > 0) {",
									"        response.data.forEach(task => {",
									"            pm.expect(task.priority).to.eql('high');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks?priority=high&page=1&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "priority",
									"value": "high"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks with Multiple Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response).to.have.property('meta');",
									"    pm.expect(response).to.have.property('traceId');",
									"});",
									"",
									"pm.test(\"Meta contains filters info\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.meta).to.have.property('filters');",
									"    pm.expect(response.meta.filters).to.have.property('status');",
									"    pm.expect(response.meta.filters).to.have.property('priority');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks?status=pending&priority=high&page=1&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "priority",
									"value": "high"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks - Invalid Status Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('error');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('traceId');",
									"    pm.expect(response.message).to.include('Invalid status filter');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks?status=invalid&page=1&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "invalid"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks - Invalid Priority Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('error');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('traceId');",
									"    pm.expect(response.message).to.include('Invalid priority filter');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks?priority=invalid&page=1&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "priority",
									"value": "invalid"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log(\"ðŸš€ Starting API test:\", pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response time is less than 6000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(6000);",
					"});",
					"",
					"pm.test(\"Response has JSON content-type\", function () {",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
} 